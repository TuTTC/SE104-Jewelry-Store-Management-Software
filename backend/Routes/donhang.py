from flask import Blueprint, request, jsonify, make_response, g
from models.DonHang import DONHANG
from models.KhachHang import KHACHHANG
from models.NguoiDung import NGUOIDUNG
from models.ChiTietDonHang import CHITIETDONHANG
from models.SanPham import SANPHAM
from models.DanhMucSanPham import DANHMUC
from database import db
from sqlalchemy.exc import SQLAlchemyError
from datetime import datetime
from flask import make_response
from io import BytesIO
from sqlalchemy import func
from decimal import Decimal
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.pagesizes import landscape
from reportlab.lib.units import cm
from reportlab.platypus import Table, TableStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import traceback
from utils.permissions import permission_required
from flask_jwt_extended import get_jwt_identity
from flask_jwt_extended import jwt_required
pdfmetrics.registerFont(TTFont('DejaVu', '../fonts/times.ttf'))
donhang_bp = Blueprint("donhang", __name__, url_prefix="/api")

# GET /api/donhang - L·∫•y danh s√°ch ƒë∆°n h√†ng
@donhang_bp.route("/donhang", methods=["GET"])
@jwt_required()
@permission_required("orders:view", "orders:view_own")
def get_danh_sach_donhang():
    try:
        current_user = g.current_user
        permissions = g.permissions

        # N·∫øu c√≥ quy·ªÅn xem t·∫•t c·∫£ ƒë∆°n h√†ng
        if "orders:view" in permissions:
            donhangs = DONHANG.query.all()
        else:
            # N·∫øu ch·ªâ c√≥ quy·ªÅn xem ƒë∆°n h√†ng c·ªßa ch√≠nh m√¨nh
            donhangs = DONHANG.query.filter_by(UserID=current_user.UserID).all()

        data = []
        for dh in donhangs:
            true_total = sum(ct.ThanhTien for ct in dh.chitietdonhang_list)
            nguoidung = NGUOIDUNG.query.get(dh.UserID)

            data.append({
                "id": dh.MaDH,
                "orderCode": f"DH{dh.MaDH:04}",
                "customerId": dh.UserID,
                "customer": nguoidung.HoTen if nguoidung else "(Kh√¥ng r√µ)",
                "date": dh.NgayDat.strftime("%Y-%m-%d"),
                "total": float(true_total),
                "status": dh.TrangThai,
                "paymentMethod": "Chuy·ªÉn kho·∫£n",
                "deliveryAddress": nguoidung.DiaChi if nguoidung else ""
            })

        return jsonify({"status": "success", "data": data})

    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})


@donhang_bp.route("/donhang", methods=["POST"])
@jwt_required()
@permission_required("orders:add")
def tao_don_hang():
    try:
        data = request.get_json()
        user_id = int(data.get("UserID"))
        chi_tiet = data.get("ChiTiet", [])  # ‚úÖ l·∫•y danh s√°ch chi ti·∫øt ƒë∆°n h√†ng n·∫øu c√≥

        khach = NGUOIDUNG.query.get(user_id)
        if not khach:
            return jsonify({"status": "error", "message": "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i."}), 400

        if not khach.vaitro or khach.vaitro.TenVaiTro.lower() != "kh√°ch h√†ng":
            return jsonify({"status": "error", "message": "Ng∆∞·ªùi d√πng n√†y kh√¥ng ph·∫£i kh√°ch h√†ng."}), 400

        if khach.TrangThai is not True:
            return jsonify({"status": "error", "message": "T√†i kho·∫£n kh√°ch h√†ng ƒëang b·ªã kh√≥a."}), 400

        # ‚úÖ Kh·ªüi t·∫°o ƒë∆°n h√†ng nh∆∞ng ƒë·ªÉ t·∫°m TongTien = 0
        donhang = DONHANG(
            UserID=user_id,
            NgayDat=datetime.strptime(data.get("NgayDat"), "%Y-%m-%d"),
            TongTien=Decimal(0),
            TrangThai=data.get("TrangThai", "Pending"),
            # PhuongThucThanhToan=data.get("PhuongThucThanhToan", ""),
            # DiaChiGiao=data.get("DiaChiGiao", "")
        )
        db.session.add(donhang)
        db.session.flush()  # üîÅ L·∫•y MaDH ngay sau khi th√™m

        # ‚úÖ Duy·ªát v√† th√™m chi ti·∫øt ƒë∆°n h√†ng
        tong_tien = Decimal(0)
        for item in chi_tiet:
            ma_sp = item.get("MaSP")
            so_luong = int(item.get("SoLuong", 1))
            gia_ban = Decimal(item.get("GiaBan", 0))
            thanh_tien = Decimal(item.get("ThanhTien", gia_ban * so_luong))

            chi_tiet_dh = CHITIETDONHANG(
                MaDH=donhang.MaDH,
                MaSP=ma_sp,
                SoLuong=so_luong,
                GiaBan=gia_ban,
                ThanhTien=thanh_tien
            )
            db.session.add(chi_tiet_dh)
            tong_tien += thanh_tien

        # ‚úÖ C·∫≠p nh·∫≠t l·∫°i t·ªïng ti·ªÅn c·ªßa ƒë∆°n h√†ng
        donhang.TongTien = tong_tien

        db.session.commit()

        return jsonify({
            "status": "success",
            "message": "T·∫°o ƒë∆°n h√†ng v√† chi ti·∫øt th√†nh c√¥ng.",
            "id": donhang.MaDH
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({"status": "error", "message": str(e)}), 500


# PUT /api/donhang/<id>/trangthai - C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
@donhang_bp.route("/donhang/<int:id>/trangthai", methods=["PUT"])
@jwt_required()
@permission_required("orders:edit")
def cap_nhat_trang_thai(id):
    try:
        data = request.get_json()
        donhang = DONHANG.query.get(id)
        if not donhang:
            return jsonify({"status": "error", "message": "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i."})
        donhang.TrangThai = data.get("TrangThai")
        db.session.commit()
        return jsonify({"status": "success", "message": "ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i."})
    except Exception as e:
        db.session.rollback()
        return jsonify({"status": "error", "message": str(e)})

# POST /api/donhang/<id>/thanhtoan - X√°c nh·∫≠n thanh to√°n
@donhang_bp.route("/donhang/<int:id>/thanhtoan", methods=["POST"])
@jwt_required()
@permission_required("orders:edit")
def xac_nhan_thanh_toan(id):
    try:
        donhang = DONHANG.query.get(id)
        if not donhang:
            return jsonify({"status": "error", "message": "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng."})
        donhang.TrangThai = "Paid"
        db.session.commit()
        return jsonify({"status": "success", "message": "ƒê√£ x√°c nh·∫≠n thanh to√°n."})
    except Exception as e:
        db.session.rollback()
        return jsonify({"status": "error", "message": str(e)})

# POST /api/donhang/<id>/giaohang - ƒê√≥ng g√≥i v√† giao h√†ng
@donhang_bp.route("/donhang/<int:id>/giaohang", methods=["POST"])
@jwt_required()
@permission_required("orders:edit")
def dong_goi_giao_hang(id):
    try:
        data = request.get_json()
        delivery_method = data.get("deliveryMethod")

        if delivery_method not in ["Nh·∫≠n t·∫°i qu·∫ßy", "Giao h√†ng t·∫≠n n∆°i"]:
            return jsonify({"status": "error", "message": "Ph∆∞∆°ng th·ª©c nh·∫≠n h√†ng kh√¥ng h·ª£p l·ªá."})

        donhang = DONHANG.query.get(id)
        if not donhang:
            return jsonify({"status": "error", "message": "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng."})

        donhang.TrangThai = delivery_method  # Ghi r√µ "Nh·∫≠n t·∫°i qu·∫ßy" ho·∫∑c "Giao h√†ng t·∫≠n n∆°i"
        db.session.commit()

        return jsonify({"status": "success", "message": "ƒê√£ c·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c nh·∫≠n h√†ng."})
    except Exception as e:
        db.session.rollback()
        return jsonify({"status": "error", "message": str(e)})

# POST /api/donhang/<id>/doitra - T·∫°o y√™u c·∫ßu tr·∫£/ƒë·ªïi h√†ng
@donhang_bp.route("/donhang/<int:id>/doitra", methods=["POST"])
@jwt_required()
@permission_required("orders:edit")
def doi_tra_don_hang(id):
    try:
        donhang = DONHANG.query.get(id)
        if not donhang:
            return jsonify({"status": "error", "message": "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng."})
        donhang.TrangThai = "ReturnRequested"
        db.session.commit()
        return jsonify({"status": "success", "message": "ƒê√£ t·∫°o y√™u c·∫ßu tr·∫£/ƒë·ªïi."})
    except Exception as e:
        db.session.rollback()
        return jsonify({"status": "error", "message": str(e)})

# DELETE /api/donhang/<id> - X√≥a ƒë∆°n h√†ng
@donhang_bp.route("/donhang/<int:id>", methods=["DELETE"])
@jwt_required()
@permission_required("orders:delete")
def xoa_don_hang(id):
    try:
        donhang = DONHANG.query.get(id)
        if not donhang:
            return jsonify({"status": "error", "message": "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i."})
        db.session.delete(donhang)
        db.session.commit()
        return jsonify({"status": "success", "message": "ƒê√£ x√≥a ƒë∆°n h√†ng."})
    except Exception as e:
        db.session.rollback()
        return jsonify({"status": "error", "message": str(e)})

# S·ª≠a th√¥ng tin ƒë∆°n h√†ng
# PUT /api/donhang/<id> - C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
@donhang_bp.route("/donhang/<int:id>", methods=["PUT"])
@jwt_required()
@permission_required("orders:edit")
def sua_don_hang(id):
    try:
        data = request.get_json()
        donhang = DONHANG.query.get(id)
        if not donhang:
            return jsonify({"status": "error", "message": "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i"}), 404

        # --- (1) Validate UserID nh∆∞ b·∫°n ƒë√£ l√†m ---
        user_id = data.get("UserID")
        if not user_id:
            return jsonify({"status": "error", "message": "Thi·∫øu UserID"}), 400
        khach = NGUOIDUNG.query.get(user_id)
        if not khach:
            return jsonify({"status": "error", "message": "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"}), 404
        if not khach.vaitro or khach.vaitro.TenVaiTro.lower() != "kh√°ch h√†ng":
            return jsonify({"status": "error", "message": "Ng∆∞·ªùi d√πng n√†y kh√¥ng ph·∫£i kh√°ch h√†ng."}), 400
        if khach.TrangThai is not True:
            return jsonify({"status": "error", "message": "T√†i kho·∫£n kh√°ch h√†ng ƒëang b·ªã kh√≥a."}), 400

        # --- (2) C·∫≠p nh·∫≠t DONHANG ---
        donhang.UserID = user_id
        donhang.NgayDat = datetime.strptime(data.get("NgayDat"), "%Y-%m-%d")
        donhang.TongTien = Decimal(str(data.get("TongTien", 0)))
        donhang.TrangThai = data.get("TrangThai")

        # --- (3) Xo√° h·∫øt chi ti·∫øt c≈© ---
        CHITIETDONHANG.query.filter_by(MaDH=id).delete()

        # --- (4) Th√™m l·∫°i chi ti·∫øt m·ªõi ---
        for ct in data.get("ChiTiet", []):
            # B·∫Øt bu·ªôc c√≥ MaSP, SoLuong, GiaBan, ThanhTien
            new_ct = CHITIETDONHANG(
                MaDH = id,
                MaSP = ct["MaSP"],
                SoLuong = ct["SoLuong"],
                GiaBan = ct["GiaBan"],
                ThanhTien = ct["ThanhTien"]
            )
            db.session.add(new_ct)

        # --- (5) Commit t·∫•t c·∫£ ---
        db.session.commit()
        return jsonify({"status": "success", "message": "ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n h√†ng v√† chi ti·∫øt."})

    except Exception as e:
        db.session.rollback()
        return jsonify({"status": "error", "message": str(e)}), 500

# GET /api/donhang/<id>/chitiet - L·∫•y chi ti·∫øt ƒë∆°n h√†ng
@donhang_bp.route("/donhang/<int:id>/chitiet", methods=["GET"])

def chi_tiet_don_hang(id):
    try:
        ctdh_list = CHITIETDONHANG.query.filter_by(MaDH=id).all()
        data = [
            {
                "MaCTDH": ct.MaCTDH,
                "MaSP": ct.MaSP,
                "SoLuong": ct.SoLuong,
                "GiaBan": float(ct.GiaBan),
                "ThanhTien": float(ct.ThanhTien)
            } for ct in ctdh_list
        ]
        return jsonify({"status": "success", "data": data})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})
    
# POST /api/donhang/<id>/chitiet - C·∫≠p nh·∫≠t chi ti·∫øt ƒë∆°n h√†ng
@donhang_bp.route("/donhang/<int:id>/chitiet", methods=["POST"])
@jwt_required()
@permission_required("orders:edit")
def cap_nhat_chi_tiet_don_hang(id):
    try:
        data = request.get_json()  # list of { MaCTDH?, MaSP, SoLuong, GiaBan }

        # 1. L·∫•y c√°c chi ti·∫øt ƒë∆°n h√†ng c≈©
        old_details = CHITIETDONHANG.query.filter_by(MaDH=id).all()

        # 2. Ho√†n l·∫°i s·ªë l∆∞·ª£ng t·ªìn kho t·ª´ chi ti·∫øt c≈©
        for ct in old_details:
            sp = SANPHAM.query.get(ct.MaSP)
            if sp:
                sp.SoLuongTon += ct.SoLuong

        # 3. X√≥a to√†n b·ªô chi ti·∫øt c≈©
        CHITIETDONHANG.query.filter_by(MaDH=id).delete()

        # 4. Th√™m chi ti·∫øt m·ªõi v√† tr·ª´ t·ªìn kho t∆∞∆°ng ·ª©ng
        for item in data:
            MaSP = int(item.get("MaSP", 0))
            SoLuong = int(item.get("SoLuong", 0))
            GiaBan = float(item.get("GiaBan", 0))
            ThanhTien = SoLuong * GiaBan

            sp = SANPHAM.query.get(MaSP)  # ‚úÖ ƒê∆∞a d√≤ng n√†y l√™n ƒë·∫ßu

            if not sp:
                raise Exception(f"S·∫£n ph·∫©m m√£ {MaSP} kh√¥ng t·ªìn t·∫°i.")
            print(f"[DEBUG] SP {MaSP} t·ªìn tr∆∞·ªõc: {sp.SoLuongTon}, b√°n: {SoLuong}")

            if sp.SoLuongTon < SoLuong:
                raise Exception(f"S·∫£n ph·∫©m m√£ {MaSP} kh√¥ng ƒë·ªß t·ªìn kho.")
            sp.SoLuongTon -= SoLuong

            new_ct = CHITIETDONHANG(
                MaDH=id,
                MaSP=MaSP,
                SoLuong=SoLuong,
                GiaBan=GiaBan,
                ThanhTien=ThanhTien
            )
            db.session.add(new_ct)

        # 5. T√≠nh l·∫°i t·ªïng ti·ªÅn
        new_total = db.session.query(
            func.coalesce(func.sum(CHITIETDONHANG.ThanhTien), 0)
        ).filter(CHITIETDONHANG.MaDH == id).scalar()

        donhang = DONHANG.query.get_or_404(id)
        donhang.TongTien = Decimal(new_total)

        db.session.commit()

        return jsonify({
            "status": "success",
            "message": "C·∫≠p nh·∫≠t th√†nh c√¥ng v√† ƒë√£ tr·ª´ t·ªìn kho.",
            "newTotal": float(new_total)
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({"status": "error", "message": str(e)}), 500
# GET /api/donhang/<id>/chitiet/pdf - Xu·∫•t chi ti·∫øt ƒë∆°n h√†ng ra PDF
@donhang_bp.route("/donhang/<int:id>/chitiet/pdf", methods=["GET"])
def xuat_pdf_chi_tiet_don(id):
    try:
        don_hang = DONHANG.query.get_or_404(id)
        
        khach_hang = NGUOIDUNG.query.get(don_hang.UserID)
        if not khach_hang or khach_hang.vaitro.TenVaiTro.lower() != "kh√°ch h√†ng":
            return jsonify({"status": "error", "message": "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng"}), 400

        ctdh_list = CHITIETDONHANG.query.filter_by(MaDH=id).all()
        if not ctdh_list:
            return jsonify({"status": "error", "message": "Kh√¥ng c√≥ chi ti·∫øt ƒë∆°n h√†ng."}), 404

        buffer = BytesIO()
        p = canvas.Canvas(buffer, pagesize=landscape(A4))
        width, height = landscape(A4)

        p.setFont("DejaVu", 12)
        p.drawCentredString(width / 2, height - 2 * cm, "PHI·∫æU B√ÅN H√ÄNG")

        p.setFont("DejaVu", 11)
        p.drawString(2 * cm, height - 3 * cm, f"S·ªë phi·∫øu: {don_hang.MaDH}")
        p.drawString(20 * cm, height - 3 * cm, f"Ng√†y l·∫≠p: {don_hang.NgayDat.strftime('%d/%m/%Y')}")
        p.drawString(2 * cm, height - 4 * cm, f"Kh√°ch h√†ng: {khach_hang.HoTen}")

        # V·∫Ω b·∫£ng
        y = height - 5 * cm
        col_widths = [1.5*cm, 6*cm, 6*cm, 2.5*cm, 2.5*cm, 3*cm, 3*cm]
        headers = ["STT", "S·∫£n ph·∫©m", "Lo·∫°i s·∫£n ph·∫©m", "S·ªë l∆∞·ª£ng", "ƒê∆°n v·ªã t√≠nh", "ƒê∆°n gi√°", "Th√†nh ti·ªÅn"]

        p.setFont("DejaVu", 10)
        x = 2 * cm
        for i, header in enumerate(headers):
            p.drawString(x, y, header)
            x += col_widths[i]

        p.line(2 * cm, y - 2, width - 2 * cm, y - 2)
        y -= 0.7 * cm

        for idx, ct in enumerate(ctdh_list, start=1):
            sp = SANPHAM.query.get(ct.MaSP)
            
            if not sp:
                ten_sp = "---"
                loai = "N/A"
                dvt = "N/A"
            else:
                ten_sp = sp.TenSP
                danh_muc = DANHMUC.query.get(sp.MaDM)
                loai = danh_muc.TenDM if danh_muc else "N/A"
                dvt = danh_muc.DonViTinh if danh_muc else "N/A"

            row = [
                str(idx),
                ten_sp,
                loai,
                str(ct.SoLuong),
                dvt,
                f"{float(ct.GiaBan):,.2f}",
                f"{float(ct.ThanhTien):,.2f}"
            ]

            x = 2 * cm
            for i, cell in enumerate(row):
                p.drawString(x, y, cell)
                x += col_widths[i]

            y -= 0.7 * cm
            if y < 2 * cm:
                p.showPage()
                p.setFont("DejaVu", 10)
                y = height - 2 * cm
        
        # p.showPage()
        label_x = width - 2 * cm - 6 * cm  # ƒê·∫∑t nh√£n "T·ªïng ti·ªÅn" b√™n tr√°i
        value_x = width - 2 * cm           # S·ªë ti·ªÅn n·∫±m s√°t l·ªÅ ph·∫£i

        p.setFont("DejaVu", 11)
        p.drawRightString(label_x, y, "T·ªïng ti·ªÅn:")
        p.drawRightString(value_x, y, f"{float(don_hang.TongTien):,.2f} VNƒê")

        p.save()

        buffer.seek(0)
        return make_response(buffer.read(), 200, {
            'Content-Type': 'application/pdf',
            'Content-Disposition': f'inline; filename=phieu_ban_hang_{id}.pdf'
        })

    except Exception as e:
        print("L·ªói khi xu·∫•t PDF:", e)
        traceback.print_exc()
        return jsonify({"status": "error", "message": str(e)}), 500